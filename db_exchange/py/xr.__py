#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- 
# PROJ: DataBase, service function.
# FILE: {0}{2}.py + load_mainCar.py
# AUTH: NickChadaev (nick-ch58@yandex.ru)
# DESC: pg-perfect-ticker's worker.
# HIST: 2023-03-08 - created
# NOTS: 
# -------------------------------------------------------------------------------------------
#   ВНИМАНИЕ:  0 - Префикс-1
#              1 - Префикс-1 в верхнем регистре
#              2 - Номер    
#              3 - Body

import shlex
import psycopg2 
from lib_pg_perfect_ticker import simple_db_pool
import time

bPN = "{0}{2}_"

PATH_DELIMITER = '/' 
bDL  = "|"
bLBR = "("
bRBR = ")"
bCM  = ","
EMP = ""
bU  = "_"

QUEUE_PROC  = "Q{1}"
QUEUE_CONT  = "Q{1}{2}"
QUEUE_LAST = "QL"

QUEUE_CONSUMER = "cons_{0}{2}"

NEXT_EVENTS = """SELECT 
  ev_id    ::bigint                          -- ID события    
, ev_time  ::timestamp(0) WITHOUT TIME ZONE  -- Время события
, ev_type  ::text                            -- Тип 
, ev_data  ::text                            -- Данные
, ev_extra1::text                            -- Доп данные #1
, ev_extra2::text                            -- Доп данные #2
, ev_extra3::text                            -- Доп данные #3
, ev_extra4::text                            -- Доп данные #4
FROM uio.f_event_get (      
     p_nm_queue    := %s::text    -- Имя очереди
    ,p_nm_consumer := %s::text    -- Подписчик
);"""

INSERT_EVENT = """
CALL uio.p_event_ins (
    p_nm_queue  := (NULLIF (%s, ''))::text 
   ,p_ev_type   := (NULLIF (%s, ''))::text 
   ,p_ev_data   := (NULLIF (%s, ''))::text 
   ,p_ev_extra1 := (NULLIF (%s, ''))::text 
   ,p_ev_extra2 := (NULLIF (%s, ''))::text 
   ,p_ev_extra3 := (NULLIF (%s, ''))::text 
   ,p_ev_extra4 := (NULLIF (%s, ''))::text
);
"""

## con = psycopg2.connect("dbname=db_exchange user=postgres port=5433")

# Есть ли незаверщённый ранее процесс ( смотрю контекст).
cur1 = con.cursor()
cur1.execute (NEXT_EVENTS, (QUEUE_CONT, QUEUE_CONSUMER))
event_с = cur1.fetchone()  

if ( event_с [0] ):
    event = event_с
else: 
    cur2 = con.cursor()
    cur2.execute (NEXT_EVENTS, (QUEUE_PROC, QUEUE_CONSUMER))
    event = cur2.fetchone() 
    
con.commit()

{3}
